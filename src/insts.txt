0=> ( perform( op initialize-stack))
1=> ( perform( op prompt-for-input))
2=> ( perform( op read))
3=> ( assign continue ( label print-result))
4=> ( goto( label eval-dispatch))
5=> ( perform( op announce-output))
6=> ( perform( op user-print) ( reg val))
7=> ( goto( label read-eval-print-loop))
8=> ( test( op self-evaluating?) ( reg exp))
9=> ( branch( label ev-self-eval))
10=> ( test( op variable?) ( reg exp))
11=> ( branch( label ev-variable))
12=> ( test( op assignment?) ( reg exp))
13=> ( branch( label ev-assignment))
14=> ( test( op definition?) ( reg exp))
15=> ( branch( label ev-definition))
16=> ( test( op if?) ( reg exp))
17=> ( branch( label ev-if))
18=> ( test( op lambda?) ( reg exp))
19=> ( branch( label ev-lambda))
20=> ( test( op begin?) ( reg exp))
21=> ( branch( label ev-begin))
22=> ( test( op application?) ( reg exp))
23=> ( branch( label ev-application))
24=> ( goto( label unknown-expression-type))
25=> ( assign val ( reg exp))
26=> ( goto( reg continue))
27=> ( assign val ( op lookup-variable-value) ( reg exp) ( reg env))
28=> ( goto( reg continue))
29=> ( assign unev ( op lambda-parameters) ( reg exp))
30=> ( assign exp ( op lambda-body) ( reg exp))
31=> ( assign val ( op make-procedure) ( reg unev) ( reg exp) ( reg env))
32=> ( goto( reg continue))
33=> ( save continue)
34=> ( save env)
35=> ( assign unev ( op operands) ( reg exp))
36=> ( save unev)
37=> ( assign exp ( op operator) ( reg exp))
38=> ( assign continue ( label ev-appl-did-operator))
39=> ( goto( label eval-dispatch))
40=> ( restore unev)
41=> ( restore env)
42=> ( assign argl ( op empty-arglist))
43=> ( assign proc ( reg val))
44=> ( test( op no-operands?) ( reg unev))
45=> ( branch( label apply-dispatch))
46=> ( save proc)
47=> ( save argl)
48=> ( assign exp ( op first-operand) ( reg unev))
49=> ( test( op last-operand?) ( reg unev))
50=> ( branch( label ev-appl-last-arg))
51=> ( save env)
52=> ( save unev)
53=> ( assign continue ( label ev-appl-accumulate-arg))
54=> ( goto( label eval-dispatch))
55=> ( restore unev)
56=> ( restore env)
57=> ( restore argl)
58=> ( assign argl ( op adjoin-arg) ( reg val) ( reg argl))
59=> ( assign unev ( op rest-operands) ( reg unev))
60=> ( goto( label ev-appl-operand-loop))
61=> ( assign continue ( label ev-appl-accum-last-arg))
62=> ( goto( label eval-dispatch))
63=> ( restore argl)
64=> ( assign argl ( op adjoin-arg) ( reg val) ( reg argl))
65=> ( restore proc)
66=> ( goto( label apply-dispatch))
67=> ( test( op primitive-procedure?) ( reg proc))
68=> ( branch( label primitive-apply))
69=> ( test( op compound-procedure?) ( reg proc))
70=> ( branch( label compound-apply))
71=> ( goto( label unknown-procedure-type))
72=> ( assign val ( op meta-apply-primitive-procedure) ( reg proc) ( reg argl))
73=> ( restore continue)
74=> ( goto( reg continue))
75=> ( assign unev ( op procedure-parameters) ( reg proc))
76=> ( assign env ( op extend-environment) ( reg unev) ( reg argl) ( reg env))
77=> ( assign unev ( op procedure-body) ( reg proc))
78=> ( goto( label ev-sequence))
79=> ( assign unev ( op begin-actions) ( reg exp))
80=> ( save continue)
81=> ( goto( label ev-sequence))
82=> ( assign exp ( op first-exp) ( reg unev))
83=> ( test( op last-exp?) ( reg unev))
84=> ( branch( label ev-sequence-last-exp))
85=> ( save unev)
86=> ( save env)
87=> ( assign continue ( label ev-sequence-continue))
88=> ( goto( label eval-dispatch))
89=> ( restore env)
90=> ( restore unev)
91=> ( assign unev ( op rest-exps) ( reg unev))
92=> ( goto( label ev-sequence))
93=> ( restore continue)
94=> ( goto( label eval-dispatch))
95=> ( save exp)
96=> ( save env)
97=> ( save continue)
98=> ( assign continue ( label ev-if-decide))
99=> ( assign exp ( op if-predicate) ( reg exp))
100=> ( goto( label eval-dispatch))
101=> ( restore continue)
102=> ( restore env)
103=> ( restore exp)
104=> ( test( op true?) ( reg val))
105=> ( branch( label ev-if-consequent))
106=> ( assign exp ( op if-alternative) ( reg exp))
107=> ( goto( label eval-dispatch))
108=> ( assign exp ( op if-consequent) ( reg exp))
109=> ( goto( label eval-dispatch))
110=> ( assign unev ( op assignment-variable) ( reg exp))
111=> ( save unev)
112=> ( assign exp ( op assignment-value) ( reg exp))
113=> ( save env)
114=> ( save continue)
115=> ( assign continue ( label ev-assignment-1))
116=> ( goto( label eval-dispatch))
117=> ( restore continue)
118=> ( restore env)
119=> ( restore unev)
120=> ( perform( op set-variable-value!) ( reg unev) ( reg val) ( reg env))
121=> ( assign val ( const 'ok))
122=> ( goto( reg continue))
123=> ( assign unev ( op definition-variable) ( reg exp))
124=> ( save unev)
125=> ( assign exp ( op definition-value) ( reg exp))
126=> ( save env)
127=> ( save continue)
128=> ( assign continue ( label ev-definition-1))
129=> ( goto( label eval-dispatch))
130=> ( restore continue)
131=> ( restore env)
132=> ( restore unev)
133=> ( assign env ( op define-variable!) ( reg unev) ( reg val) ( reg env))
134=> ( assign val ( const 'ok))
135=> ( goto( reg continue))
136=> ( assign val ( const 'unknown-expression-type-error))
137=> ( goto( label signal-error))
138=> ( restore continue)
139=> ( assign val ( const 'unknown-procedure-type-error))
140=> ( goto( label signal-error))
141=> ( perform( op user-print) ( reg val))
142=> ( goto( label read-eval-print-loop))