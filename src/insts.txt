0=> ( perform( op initialize-stack))
1=> ( perform( op prompt-for-input))
2=> ( perform( op read))
3=> ( assign continue ( label print-result))
4=> ( goto( label eval-dispatch))
5=> ( perform( op announce-output))
6=> ( perform( op user-print) ( reg val))
7=> ( goto( label read-eval-print-loop))
8=> ( test( op self-evaluating?) ( reg exp))
9=> ( perform( op print-reg-content) ( reg flag))
10=> ( branch( label ev-self-eval))
11=> ( test( op variable?) ( reg exp))
12=> ( branch( label ev-variable))
13=> ( test( op assignment?) ( reg exp))
14=> ( branch( label ev-assignment))
15=> ( test( op definition?) ( reg exp))
16=> ( branch( label ev-definition))
17=> ( test( op if?) ( reg exp))
18=> ( branch( label ev-if))
19=> ( test( op lambda?) ( reg exp))
20=> ( branch( label ev-lambda))
21=> ( test( op begin?) ( reg exp))
22=> ( branch( label ev-begin))
23=> ( test( op application?) ( reg exp))
24=> ( branch( label ev-application))
25=> ( goto( label unknown-expression-type))
26=> ( assign val ( reg exp))
27=> ( goto( reg continue))
28=> ( assign val ( op lookup-variable-value) ( reg exp) ( reg env))
29=> ( goto( reg continue))
30=> ( assign unev ( op lambda-parameters) ( reg exp))
31=> ( assign exp ( op lambda-body) ( reg exp))
32=> ( assign val ( op make-procedure) ( reg unev) ( reg exp) ( reg env))
33=> ( goto( reg continue))
34=> ( save continue)
35=> ( save env)
36=> ( assign unev ( op operands) ( reg exp))
37=> ( save unev)
38=> ( assign exp ( op operator) ( reg exp))
39=> ( assign continue ( label ev-appl-did-operator))
40=> ( goto( label eval-dispatch))
41=> ( restore unev)
42=> ( restore env)
43=> ( assign argl ( op empty-arglist))
44=> ( assign proc ( reg val))
45=> ( test( op no-operands?) ( reg unev))
46=> ( branch( label apply-dispatch))
47=> ( save proc)
48=> ( save argl)
49=> ( assign exp ( op first-operand) ( reg unev))
50=> ( test( op last-operand?) ( reg unev))
51=> ( branch( label ev-appl-last-arg))
52=> ( save env)
53=> ( save unev)
54=> ( assign continue ( label ev-appl-accumulate-arg))
55=> ( goto( label eval-dispatch))
56=> ( restore unev)
57=> ( restore env)
58=> ( restore argl)
59=> ( assign argl ( op adjoin-arg) ( reg val) ( reg argl))
60=> ( assign unev ( op rest-operands) ( reg unev))
61=> ( goto( label ev-appl-operand-loop))
62=> ( assign continue ( label ev-appl-accum-last-arg))
63=> ( goto( label eval-dispatch))
64=> ( restore argl)
65=> ( assign argl ( op adjoin-arg) ( reg val) ( reg argl))
66=> ( restore proc)
67=> ( goto( label apply-dispatch))
68=> ( test( op primitive-procedure?) ( reg proc))
69=> ( branch( label primitive-apply))
70=> ( test( op compound-procedure?) ( reg proc))
71=> ( branch( label compound-apply))
72=> ( goto( label unknown-procedure-type))
73=> ( assign val ( op meta-apply-primitive-procedure) ( reg proc) ( reg argl))
74=> ( restore continue)
75=> ( goto( reg continue))
76=> ( assign unev ( op procedure-parameters) ( reg proc))
77=> ( assign env ( op extend-environment) ( reg unev) ( reg argl) ( reg env))
78=> ( assign unev ( op procedure-body) ( reg proc))
79=> ( goto( label ev-sequence))
80=> ( assign unev ( op begin-actions) ( reg exp))
81=> ( save continue)
82=> ( goto( label ev-sequence))
83=> ( assign exp ( op first-exp) ( reg unev))
84=> ( test( op last-exp?) ( reg unev))
85=> ( branch( label ev-sequence-last-exp))
86=> ( save unev)
87=> ( save env)
88=> ( assign continue ( label ev-sequence-continue))
89=> ( goto( label eval-dispatch))
90=> ( restore env)
91=> ( restore unev)
92=> ( assign unev ( op rest-exps) ( reg unev))
93=> ( goto( label ev-sequence))
94=> ( restore continue)
95=> ( goto( label eval-dispatch))
96=> ( save exp)
97=> ( save env)
98=> ( save continue)
99=> ( assign continue ( label ev-if-decide))
100=> ( assign exp ( op if-predicate) ( reg exp))
101=> ( goto( label eval-dispatch))
102=> ( restore continue)
103=> ( restore env)
104=> ( restore exp)
105=> ( test( op true?) ( reg val))
106=> ( branch( label ev-if-consequent))
107=> ( assign exp ( op if-alternative) ( reg exp))
108=> ( goto( label eval-dispatch))
109=> ( assign exp ( op if-consequent) ( reg exp))
110=> ( goto( label eval-dispatch))
111=> ( assign unev ( op assignment-variable) ( reg exp))
112=> ( save unev)
113=> ( assign exp ( op assignment-value) ( reg exp))
114=> ( save env)
115=> ( save continue)
116=> ( assign continue ( label ev-assignment-1))
117=> ( goto( label eval-dispatch))
118=> ( restore continue)
119=> ( restore env)
120=> ( restore unev)
121=> ( perform( op set-variable-value!) ( reg unev) ( reg val) ( reg env))
122=> ( assign val ( const 'ok))
123=> ( goto( reg continue))
124=> ( assign unev ( op definition-variable) ( reg exp))
125=> ( save unev)
126=> ( assign exp ( op definition-value) ( reg exp))
127=> ( save env)
128=> ( save continue)
129=> ( assign continue ( label ev-definition-1))
130=> ( goto( label eval-dispatch))
131=> ( restore continue)
132=> ( restore env)
133=> ( restore unev)
134=> ( assign env ( op define-variable!) ( reg unev) ( reg val) ( reg env))
135=> ( assign val ( const 'ok))
136=> ( goto( reg continue))
137=> ( assign val ( const 'unknown-expression-type-error))
138=> ( goto( label signal-error))
139=> ( restore continue)
140=> ( assign val ( const 'unknown-procedure-type-error))
141=> ( goto( label signal-error))
142=> ( perform( op user-print) ( reg val))
143=> ( goto( label read-eval-print-loop))